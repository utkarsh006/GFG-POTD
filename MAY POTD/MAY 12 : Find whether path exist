class Solution
{
    public:
/* BFS :: Time complexity: O(n^2), Space complexity: O(n^2)

We push the source into queue and do a BFS, until we get the destination. 
If all the possible nodes get visited, we can't reach the destination. 
We can mark the visited cell to 0 in the given matrix, 
to avoid visited matrix as extra space.     */

bool is_Possible(vector<vector<int>>& v) 
{
    int n = v.size();
    queue<pair<int,int>> q;
    
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(v[i][j]==1)
                {
                    q.push({i,j});
                    v[i][j] = 0;
                }
            }
        }
        
        int dir[4][2] = {{0,1},{0,-1},{1,0},{-1,0}};
        
        while(!q.empty())
        {
            int x = q.front().first;
            int y = q.front().second;
            q.pop();
            
            for(int i=0;i<4;i++)
            {
                int nx = x+dir[i][0], ny = y+dir[i][1];
                
                if(nx>=0 && nx<n && ny>=0 && ny<n && v[nx][ny]!=0)
                {
                    if(v[nx][ny]==2) return true;
                    q.push({nx,ny});
                    v[nx][ny]=0;
                }
            }
            
        }
        return false;
    }
};
